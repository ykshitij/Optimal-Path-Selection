
clc; clear all; close all;
load('posndis05_80.mat')
lambda=81;
copy=dis_pos40;
range=9;
data=copy;
data(copy>=range) =0;
past_t=5;
 
for i=1:50
        if i==1
            diff_mat(:,:,1)=data(:,:,i)-data(:,:,i);
        end
        if i~=1
            diff_mat(:,:,i)=abs(data(:,:,i)-data(:,:,i-1));
        end
end  
sum1=0;
for i=1:past_t
    sum1=sum1+diff_mat(:,:,i);
    avg_mat(:,:,i)=(sum1/i);
end
 
 
for j= past_t+1:50
    sum=0;temp=0;
    for k=j-past_t:j-1
        sum=sum+diff_mat(:,:,k);
    end;
    sum=sum/past_t;
    avg_mat(:,:,j)=sum;
    for k=j-past_t:j-1
    temp= temp + (   (avg_mat(:,:,j)-diff_mat(:,:,k))*(avg_mat(:,:,j)-diff_mat(:,:,k)) );
    end;
    temp= (temp/past_t);
    temp=abs(sqrt(temp));
    std_mat(:,:,j)=temp;
end
data(data==0)=inf;
avg_mat(avg_mat==0) =15;
 
for i=1:lambda
    for j=1:lambda
        max = -inf ;
        min=inf;
       for k=1:50
           if diff_mat(i,j,k)> max
               max = diff_mat(i,j,k);
           end
           if diff_mat(i,j,k)<min
               min = diff_mat(i,j,k);
           end
            
       end  
                glbmax(i,j) = max;
                 glbmin(i,j)=min;  
    end
end
 
for i=1:lambda
    for j=1:lambda
        for k=1:50
            if i==j 
                weight(i,j,k)=0;
                continue 
            end
            if glbmax(i,j)== glbmin(i,j)
                weight(i,j,k)=1;
                continue
            end
              weight(i,j,k)= (  abs( ( glbmax(i,j) - avg_mat(i,j,k) ) /  (glbmax(i,j)-glbmin(i,j)) ) )/2;
        end
    end
end
k=50;
end_index=lambda;
beta= 5;
start_time=8;
c=300000000;
time =start_time;
start_index=1;
[shortestPathsdl, totalCostsdl] = kShortestPath(data(:,:,time),start_index,end_index,k);
avg_dl=0;
final_path=[];
dl_final_path=0;
 
    while start_index~=end_index
        for i=1:k
            dl(i)=0;
 
        end
 
        min=inf;
        for i=1:k
            cur_ind=1;
            hop_number=1;
            while(shortestPathsdl{1,i}(cur_ind)~=end_index)
                dl(i)= dl(i) + weight(shortestPathsdl{1,i}(cur_ind), shortestPathsdl{1,i}(cur_ind + 1),time)*(  (hop_number/beta) + (diff_mat(shortestPathsdl{1,i}(cur_ind), shortestPathsdl{1,i}(cur_ind + 1),time)/c )*100000000) ;
                cur_ind =cur_ind+1;
                hop_number = hop_number + 1;
            end
            if dl(i)<min 
                min=dl(i);
                min_index=i;
            end
        end
        final_path= [final_path;start_index];
        dl_final_path = dl_final_path + min;
        time =time+1;
        start_index=shortestPathsdl{1,min_index}(2);
        [shortestPathsdl, totalCostsdl] = kShortestPath(data(:,:,time),start_index,end_index,k);
    end
            
final_path=[final_path;end_index];
 
 
 
 
[shortestPathsdl, totalCostsdl] = kShortestPath(data(:,:,time),1,end_index,k);
sum_min_dl=0;
sum_mat_plr=0;
    for q=1:(lambda-1)
        xindex=q;
        for t=6:40
            temp=[];
            while xindex~=end_index
                for i=1:k
                    dl(i)=0;
                end
                [shortestPathsdl, totalCostsdl] = kShortestPath(data(:,:,t),xindex,end_index,k);
                min=inf;
                for i=1:k    
                    cur_ind=1;
                    hop_number=1;
                    while(shortestPathsdl{1,i}(cur_ind)~=end_index)
                        dl(i)= dl(i) + weight(shortestPathsdl{1,i}(cur_ind), shortestPathsdl{1,i}(cur_ind + 1),t)*(  (hop_number/beta) + (diff_mat(shortestPathsdl{1,i}(cur_ind), shortestPathsdl{1,i}(cur_ind + 1),t)/c )*100000000) ;
                        %std_sum(i) = std_sum(i) + std_mat(shortestPathsdl{1,i}(cur_ind), shortestPathsdl{1,i}(cur_ind + 1),t); 
                        cur_ind =cur_ind+1;
                        hop_number = hop_number + 1;
                    end
                    if dl(i)<min 
                        min=dl(i);
                        min_index=i;
                    end
                end
                temp= [temp;xindex];
                xindex=shortestPathsdl{1,min_index}(2);
            end
                std_sum=0;
                temp=[temp;end_index];
                delta=t;
                alpha=1;
                begin = temp(alpha);
                while(begin~=end_index)
                    std_sum = std_sum + std_mat(temp(alpha),temp(alpha+1),delta);
                    delta=delta+1;
                    alpha=alpha+1;
                   begin=temp(alpha);
                end
                std_sum = std_sum/alpha;
                sum_min_dl=sum_min_dl + min;
                sum_mat_plr=sum_mat_plr + std_sum;
        end
    end
    sum_min_dl = sum_min_dl/(35*(lambda-1));
    sum_mat_plr=sum_mat_plr/(35*(lambda-1));
disp(sum_mat_plr)
disp(sum_min_dl)
 
 
 
 


